import{h as o,F as s,H as n,x as r}from"./q-3396b8e1.js";const i=[{text:"Example",id:"example",level:3}],h={title:"useOn() / useOnDocument() / useOnWindow() | Tutorial",meta:[],styles:[],links:[],frontmatter:{contributors:["manucorporat","adamdbradley"]}},l={title:"useOn() / useOnDocument() / useOnWindow() | Tutorial",contributors:["manucorporat","adamdbradley"]};function a(t){const e=Object.assign({p:"p",code:"code",h3:"h3",a:"a",span:"span"},t.components);return n(r,{children:[n(e.p,{children:["Use ",n(e.code,{children:"useOn()"})," / ",n(e.code,{children:"useOnDocument()"})," / ",n(e.code,{children:"useOnWindow()"})," to programmatically set up listeners on host elements. This is useful when you are creating custom APIs and don't have access to place these events in the JSX or if the events are not known ahead of time, such as if they are created based on component props."]}),`
`,n(e.h3,{id:"example",children:[n(e.a,{"aria-hidden":"true",tabindex:"-1",href:"#example",children:n(e.span,{class:"icon icon-link"})}),"Example"]}),`
`,n(e.p,{children:["The example on the right shows how to use ",n(e.code,{children:"useOn()"})," method. Duplicate the code to explore how to use ",n(e.code,{children:"useOnDocument()"})," / ",n(e.code,{children:"useOnWindow()"})," and how they behave differently."]})]})}function c(t={}){const{wrapper:e}=t.components||{};return e?n(e,Object.assign({},t,{children:n(a,t)})):a(t)}const u=()=>o(s,{children:o(c,{},3,null)},3,"4fUJRIXB");export{u as default,l as frontmatter,h as head,i as headings};
